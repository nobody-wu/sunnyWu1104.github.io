<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cornelius&#39;s Notes</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://sunnyWu1104.github.io/"/>
  <updated>2018-06-11T09:37:48.000Z</updated>
  <id>https://sunnyWu1104.github.io/</id>
  
  <author>
    <name>Cornelius</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【java入门必看】只要一篇&lt;从入门到大神&gt;</title>
    <link href="https://sunnyWu1104.github.io/2018/06/11/funny/"/>
    <id>https://sunnyWu1104.github.io/2018/06/11/funny/</id>
    <published>2018-06-11T09:34:09.000Z</published>
    <updated>2018-06-11T09:37:48.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p95stksgt.bkt.clouddn.com/funny01.jpeg" alt="funny"></p><p>不存在的，洗洗睡吧，别做梦了。脚踏实地一步一步来</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://p95stksgt.bkt.clouddn.com/funny01.jpeg&quot; alt=&quot;funny&quot;&gt;&lt;/p&gt;
&lt;p&gt;不存在的，洗洗睡吧，别做梦了。脚踏实地一步一步来&lt;/p&gt;

      
    
    </summary>
    
      <category term="Docker" scheme="https://sunnyWu1104.github.io/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://sunnyWu1104.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Dockerfile命令详解</title>
    <link href="https://sunnyWu1104.github.io/2018/06/08/dockerfile-command/"/>
    <id>https://sunnyWu1104.github.io/2018/06/08/dockerfile-command/</id>
    <published>2018-06-08T08:10:53.000Z</published>
    <updated>2018-06-08T08:54:33.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p95stksgt.bkt.clouddn.com/docker01.png" alt="Docker"></p><hr><h2 id="Dockerfile是什么？"><a href="#Dockerfile是什么？" class="headerlink" title="Dockerfile是什么？"></a>Dockerfile是什么？</h2><p>简单说就是：镜像的定制</p><p>Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。<br>镜像的定制实际上就是定制每一层所添加的配置、文件。如果我们可以把每一层修改、安装、构建、操作的命令都写入一个脚本，用这个脚本来构建、定制镜像，那么之前提及的无法重复的问题、镜像构建透明性的问题、体积的问题就都会解决。这个脚本就是 Dockerfile。</p><h2 id="为什么用Dockerfile？"><a href="#为什么用Dockerfile？" class="headerlink" title="为什么用Dockerfile？"></a>为什么用Dockerfile？</h2><p>Dockerfile其实是用于微服务化项目中镜像内容的处理方法。用来定义镜像、依赖镜像来运行容器。<br>使用Dockerfile非常容易的定义镜像内的内容。</p><p>Dockerfile 是一个文本文件，其内包含了一条条的指令(Instruction)，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。有了 Dockerfile，当我们需要定制自己额外的需求时，只需在 Dockerfile 上添加或者修改指令，重新生成 image 即可，省去了敲命令的麻烦。</p><p>换言之：我们可以通过一个简单的文件去创建镜像，启动容器等等的一系列脚本的动作。更方便的使我们部署项目</p><h2 id="Dcokerfile文件格式"><a href="#Dcokerfile文件格式" class="headerlink" title="Dcokerfile文件格式"></a>Dcokerfile文件格式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">##  Dockerfile文件格式</span><br><span class="line"></span><br><span class="line"># This dockerfile uses the ubuntu image</span><br><span class="line"># VERSION 2 - EDITION 1</span><br><span class="line"># Author: docker_user</span><br><span class="line"># Command format: Instruction [arguments / command] ..</span><br><span class="line"></span><br><span class="line"># 1、第一行必须指定 基础镜像信息</span><br><span class="line">FROM ubuntu</span><br><span class="line"></span><br><span class="line">ps: 除了选择现有镜像为基础镜像外，Docker 还存在一个特殊的镜像，名为 scratch。这个镜像是虚拟的概念，并不实际存在，它表示一个空白的镜像</span><br><span class="line">FROM scratch</span><br><span class="line"></span><br><span class="line"># 2、维护者信息</span><br><span class="line">MAINTAINER docker_user docker_user@email.com</span><br><span class="line"></span><br><span class="line"># 3、镜像操作指令</span><br><span class="line">RUN echo &quot;deb http://archive.ubuntu.com/ubuntu/ raring main universe&quot; &gt;&gt; /etc/apt/sources.list</span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install -y nginx</span><br><span class="line">RUN echo &quot;\ndaemon off;&quot; &gt;&gt; /etc/nginx/nginx.conf</span><br><span class="line"></span><br><span class="line"># 4、容器启动执行指令</span><br><span class="line">CMD /usr/sbin/nginx</span><br></pre></td></tr></table></figure><h2 id="Dcokerfile指令详解"><a href="#Dcokerfile指令详解" class="headerlink" title="Dcokerfile指令详解"></a>Dcokerfile指令详解</h2><h3 id="FROM-指定基础镜像"><a href="#FROM-指定基础镜像" class="headerlink" title="FROM:指定基础镜像"></a>FROM:指定基础镜像</h3><p>FROM 指令用于指定其后构建新镜像所使用的基础镜像。FROM 指令必是 Dockerfile 文件中的首条命令，启动构建流程后，Docker 将会基于该镜像构建新镜像，FROM 后的命令也会基于这个基础镜像。</p><p>FROM语法格式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FROM &lt;image&gt;</span><br><span class="line">或者</span><br><span class="line">FROM &lt;image&gt;:&lt;tag&gt;</span><br><span class="line">或者</span><br><span class="line">FROM &lt;image&gt;:&lt;digest&gt;</span><br></pre></td></tr></table></figure><p>通过 FROM 指定的镜像，可以是任何有效的基础镜像。FROM 有以下限制：</p><ul><li>FROM 必须 是 Dockerfile 中第一条非注释命令</li><li>在一个 Dockerfile 文件中创建多个镜像时，FROM 可以多次出现。只需在每个新命令 FROM 之前，记录提交(run)上次的镜像 ID。</li><li>tag 或 digest 是可选的，如果不使用这两个值时，会使用 latest 版本的基础镜像</li></ul><h3 id="RUN-执行命令"><a href="#RUN-执行命令" class="headerlink" title="RUN:执行命令"></a>RUN:执行命令</h3><p>在镜像的构建过程中执行特定的命令，并生成一个中间镜像。格式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#shell格式(主要还是用shell方便)</span><br><span class="line">RUN &lt;command&gt;</span><br><span class="line">#exec格式</span><br><span class="line">RUN [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</span><br></pre></td></tr></table></figure><ul><li>RUN 命令将在当前 image 中执行任意合法命令并提交执行结果。命令执行提交后，就会自动执行 Dockerfile 中的下一个指令。</li><li>层级 RUN 指令和生成提交是符合 Docker 核心理念的做法。它允许像版本控制那样，在任意一个点，对 image 镜像进行定制化构建。</li><li>RUN 指令创建的中间镜像会被缓存，并会在下次构建中使用。如果不想使用这些缓存镜像，可以在构建时指定 –no-cache 参数，如：docker build –no-cache。</li></ul><h3 id="COPY-复制文件"><a href="#COPY-复制文件" class="headerlink" title="COPY:复制文件"></a>COPY:复制文件</h3><p>格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">COPY &lt;源路径&gt;... &lt;目标路径&gt;</span><br><span class="line">COPY [&quot;&lt;源路径1&gt;&quot;,... &quot;&lt;目标路径&gt;&quot;]</span><br><span class="line"></span><br><span class="line">使用通配符，其通配符规则要满足 Go 的 filepath.Match 规则</span><br><span class="line">COPY hom* /mydir/</span><br><span class="line">COPY hom?.txt /mydir/</span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line">COPY my.cnf /etc/my.cnf</span><br></pre></td></tr></table></figure><h3 id="ADD-更高级的复制文件"><a href="#ADD-更高级的复制文件" class="headerlink" title="ADD:更高级的复制文件"></a>ADD:更高级的复制文件</h3><p>ADD 指令和 COPY 的格式和性质基本一致。但是在 COPY 基础上增加了一些功能。比如&lt;源路径&gt;可以是一个 URL，这种情况下，Docker 引擎会试图去下载这个链接的文件放到&lt;目标路径&gt;去。</p><p>在构建镜像时，复制上下文中的文件到镜像内，格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ADD &lt;源路径&gt;... &lt;目标路径&gt;</span><br><span class="line">ADD [&quot;&lt;源路径&gt;&quot;,... &quot;&lt;目标路径&gt;&quot;]</span><br></pre></td></tr></table></figure><ul><li>如果 docker 发现文件内容被改变，则接下来的指令都不会再使用缓存。关于复制文件时需要处理的/，基本跟正常的 copy 一致</li></ul><h3 id="ENV-设置环境变量"><a href="#ENV-设置环境变量" class="headerlink" title="ENV:设置环境变量"></a>ENV:设置环境变量</h3><p>格式有两种：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ENV &lt;key&gt; &lt;value&gt;</span><br><span class="line">ENV &lt;key1&gt;=&lt;value1&gt; &lt;key2&gt;=&lt;value2&gt;...</span><br></pre></td></tr></table></figure></p><p>这个指令很简单，就是设置环境变量而已，无论是后面的其它指令，如 RUN，还是运行时的应用，都可以直接使用这里定义的环境变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ENV VERSION=1.0 DEBUG=on \</span><br><span class="line">    NAME=&quot;Happy Feet&quot;</span><br></pre></td></tr></table></figure><p>这个例子中演示了如何换行，以及对含有空格的值用双引号括起来的办法，这和 Shell 下的行为是一致的。</p><h3 id="EXPOSE-设置监听端口"><a href="#EXPOSE-设置监听端口" class="headerlink" title="EXPOSE:设置监听端口"></a>EXPOSE:设置监听端口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPOSE &lt;port&gt; [&lt;port&gt;...]</span><br></pre></td></tr></table></figure><p>EXPOSE 指令并不会让容器监听 host 的端口，如果需要，需要在 docker run 时使用 -p、-P 参数来发布容器端口到 host 的某个端口上。</p><h3 id="VOLUME-定义匿名卷"><a href="#VOLUME-定义匿名卷" class="headerlink" title="VOLUME:定义匿名卷"></a>VOLUME:定义匿名卷</h3><p>VOLUME用于创建挂载点，即向基于所构建镜像创始的容器添加卷：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VOLUME [&quot;/data&quot;]</span><br></pre></td></tr></table></figure><p>一个卷可以存在于一个或多个容器的指定目录，该目录可以绕过联合文件系统，并具有以下功能：</p><ul><li>卷可以容器间共享和重用</li><li>容器并不一定要和其它容器共享卷</li><li>修改卷后会立即生效</li><li>对卷的修改不会对镜像产生影响</li><li>卷会一直存在，直到没有任何容器在使用它</li></ul><ul><li>VOLUME 让我们可以将源代码、数据或其它内容添加到镜像中，而又不并提交到镜像中，并使我们可以多个容器间共享这些内容。</li></ul><h3 id="WORKDIR-指定工作目录"><a href="#WORKDIR-指定工作目录" class="headerlink" title="WORKDIR:指定工作目录"></a>WORKDIR:指定工作目录</h3><p>WORKDIR用于在容器内设置一个工作目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WORKDIR /path/to/workdir</span><br></pre></td></tr></table></figure><p>通过WORKDIR设置工作目录后，Dockerfile 中其后的命令 RUN、CMD、ENTRYPOINT、ADD、COPY 等命令都会在该目录下执行。 如，使用WORKDIR设置工作目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">WORKDIR /a</span><br><span class="line">WORKDIR b</span><br><span class="line">WORKDIR c</span><br><span class="line">RUN pwd</span><br></pre></td></tr></table></figure><p>在以上示例中，pwd 最终将会在 /a/b/c 目录中执行。在使用 docker run 运行容器时，可以通过-w参数覆盖构建时所设置的工作目录。</p><h3 id="USER-指定当前用户"><a href="#USER-指定当前用户" class="headerlink" title="USER:指定当前用户"></a>USER:指定当前用户</h3><p>USER 用于指定运行镜像所使用的用户：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USER daemon</span><br></pre></td></tr></table></figure><p>使用USER指定用户时，可以使用用户名、UID 或 GID，或是两者的组合。以下都是合法的指定试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">USER user</span><br><span class="line">USER user:group</span><br><span class="line">USER uid</span><br><span class="line">USER uid:gid</span><br><span class="line">USER user:gid</span><br><span class="line">USER uid:group</span><br></pre></td></tr></table></figure><p>使用USER指定用户后，Dockerfile 中其后的命令 RUN、CMD、ENTRYPOINT 都将使用该用户。镜像构建完成后，通过 docker run 运行容器时，可以通过 -u 参数来覆盖所指定的用户。</p><h3 id="CMD-指定在容器启动时所要执行的命令"><a href="#CMD-指定在容器启动时所要执行的命令" class="headerlink" title="CMD:指定在容器启动时所要执行的命令"></a>CMD:指定在容器启动时所要执行的命令</h3><p>有以下三种格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CMD [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;]</span><br><span class="line">CMD [&quot;param1&quot;,&quot;param2&quot;]</span><br><span class="line">CMD command param1 param2(shell)</span><br></pre></td></tr></table></figure><p>省略可执行文件的 exec 格式，这种写法使 CMD 中的参数当做 ENTRYPOINT 的默认参数，此时 ENTRYPOINT 也应该是 exec 格式，具体与 ENTRYPOINT 的组合使用，参考 ENTRYPOINT。</p><ul><li>注意<br>与 RUN 指令的区别：RUN 在构建的时候执行，并生成一个新的镜像，CMD 在容器运行的时候执行，在构建时不进行任何操作。</li></ul><h3 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h3><p>ENTRYPOINT 用于给容器配置一个可执行程序。也就是说，每次使用镜像创建容器时，通过 ENTRYPOINT 指定的程序都会被设置为默认程序。ENTRYPOINT 有以下两种形式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ENTRYPOINT [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</span><br><span class="line">ENTRYPOINT command param1 param2</span><br></pre></td></tr></table></figure><p>ENTRYPOINT 与 CMD 非常类似，不同的是通过docker run执行的命令不会覆盖 ENTRYPOINT，而docker run命令中指定的任何参数，都会被当做参数再次传递给 ENTRYPOINT。Dockerfile 中只允许有一个 ENTRYPOINT 命令，多指定时会覆盖前面的设置，而只执行最后的 ENTRYPOINT 指令。</p><p>docker run运行容器时指定的参数都会被传递给 ENTRYPOINT ，且会覆盖 CMD 命令指定的参数。如，执行docker run <image> -d时，-d 参数将被传递给入口点。</image></p><p>也可以通过docker run –entrypoint重写 ENTRYPOINT 入口点。如：可以像下面这样指定一个容器执行程序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ENTRYPOINT [&quot;/usr/bin/nginx&quot;]</span><br></pre></td></tr></table></figure><p>完整构建代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Version: 0.0.3</span><br><span class="line">FROM ubuntu:16.04</span><br><span class="line">MAINTAINER 何民三 &quot;cn.liuht@gmail.com&quot;</span><br><span class="line">RUN apt-get update</span><br><span class="line">RUN apt-get install -y nginx</span><br><span class="line">RUN echo &apos;Hello World, 我是个容器&apos; \</span><br><span class="line">   &gt; /var/www/html/index.html</span><br><span class="line">ENTRYPOINT [&quot;/usr/sbin/nginx&quot;]</span><br><span class="line">EXPOSE 80</span><br></pre></td></tr></table></figure><p>使用docker build构建镜像，并将镜像指定为 itbilu/test：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t=&quot;itbilu/test&quot; .  ---后面的路径.别忘了</span><br></pre></td></tr></table></figure><p>构建完成后，使用itbilu/test启动一个容器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -i -t  itbilu/test -g &quot;daemon off;&quot;</span><br></pre></td></tr></table></figure><p>在运行容器时，我们使用了 -g “daemon off;”，这个参数将会被传递给 ENTRYPOINT，最终在容器中执行的命令为 /usr/sbin/nginx -g “daemon off;”</p><h3 id="LABEL"><a href="#LABEL" class="headerlink" title="LABEL"></a>LABEL</h3><p>LABEL用于为镜像添加元数据，元数以键值对的形式指定：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LABEL &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; ...</span><br></pre></td></tr></table></figure><p>使用LABEL指定元数据时，一条LABEL指定可以指定一或多条元数据，指定多条元数据时不同元数据之间通过空格分隔。推荐将所有的元数据通过一条LABEL指令指定，以免生成过多的中间镜像。 如，通过LABEL指定一些元数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LABEL version=&quot;1.0&quot; description=&quot;这是一个Web服务器&quot; by=&quot;IT笔录&quot;</span><br></pre></td></tr></table></figure><p>指定后可以通过docker inspect查看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker inspect itbilu/test</span><br><span class="line">&quot;Labels&quot;: &#123;</span><br><span class="line">    &quot;version&quot;: &quot;1.0&quot;,</span><br><span class="line">    &quot;description&quot;: &quot;这是一个Web服务器&quot;,</span><br><span class="line">    &quot;by&quot;: &quot;IT笔录&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="ARG"><a href="#ARG" class="headerlink" title="ARG"></a>ARG</h3><p>ARG用于指定传递给构建运行时的变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ARG &lt;name&gt;[=&lt;default value&gt;]</span><br></pre></td></tr></table></figure><p>如，通过ARG指定两个变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ARG site</span><br><span class="line">ARG build_user=IT笔录</span><br></pre></td></tr></table></figure><p>以上我们指定了 site 和 build_user 两个变量，其中 build_user 指定了默认值。在使用 docker build 构建镜像时，可以通过 –build-arg <varname>=<value> 参数来指定或重设置这些变量的值。</value></varname></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build --build-arg site=itiblu.com -t itbilu/test .</span><br></pre></td></tr></table></figure><p>这样我们构建了 itbilu/test 镜像，其中site会被设置为 itbilu.com，由于没有指定 build_user，其值将是默认值 IT 笔录。</p><h3 id="ONBUILD"><a href="#ONBUILD" class="headerlink" title="ONBUILD"></a>ONBUILD</h3><p>ONBUILD用于设置镜像触发器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ONBUILD [INSTRUCTION]</span><br></pre></td></tr></table></figure><p>当所构建的镜像被用做其它镜像的基础镜像，该镜像中的触发器将会被钥触发。 如，当镜像被使用时，可能需要做一些处理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[...]</span><br><span class="line">ONBUILD ADD . /app/src</span><br><span class="line">ONBUILD RUN /usr/local/bin/python-build --dir /app/src</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure><ul><li>ps:因为在实际项目是依赖镜像的情况还是蛮多的，所以这个也会经常用到</li></ul><h3 id="STOPSIGNAL"><a href="#STOPSIGNAL" class="headerlink" title="STOPSIGNAL"></a>STOPSIGNAL</h3><p>STOPSIGNAL用于设置停止容器所要发送的系统调用信号：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">STOPSIGNAL signal</span><br></pre></td></tr></table></figure><p>所使用的信号必须是内核系统调用表中的合法的值，如：SIGKILL。</p><h3 id="SHELL"><a href="#SHELL" class="headerlink" title="SHELL"></a>SHELL</h3><p>SHELL用于设置执行命令（shell式）所使用的的默认 shell 类型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHELL [&quot;executable&quot;, &quot;parameters&quot;]</span><br></pre></td></tr></table></figure><p>SHELL在Windows环境下比较有用，Windows 下通常会有 cmd 和 powershell 两种 shell，可能还会有 sh。这时就可以通过 SHELL 来指定所使用的 shell 类型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">FROM microsoft/windowsservercore</span><br><span class="line"></span><br><span class="line"># Executed as cmd /S /C echo default</span><br><span class="line">RUN echo default</span><br><span class="line"></span><br><span class="line"># Executed as cmd /S /C powershell -command Write-Host default</span><br><span class="line">RUN powershell -command Write-Host default</span><br><span class="line"></span><br><span class="line"># Executed as powershell -command Write-Host hello</span><br><span class="line">SHELL [&quot;powershell&quot;, &quot;-command&quot;]</span><br><span class="line">RUN Write-Host hello</span><br><span class="line"></span><br><span class="line"># Executed as cmd /S /C echo hello</span><br><span class="line">SHELL [&quot;cmd&quot;, &quot;/S&quot;&quot;, &quot;/C&quot;]</span><br><span class="line">RUN echo hello</span><br></pre></td></tr></table></figure><h2 id="Dockerfile示例"><a href="#Dockerfile示例" class="headerlink" title="Dockerfile示例"></a>Dockerfile示例</h2><h3 id="构建Nginx运行环境"><a href="#构建Nginx运行环境" class="headerlink" title="构建Nginx运行环境"></a>构建Nginx运行环境</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"># 指定基础镜像</span><br><span class="line">FROM sameersbn/ubuntu:14.04.20161014</span><br><span class="line"></span><br><span class="line"># 维护者信息</span><br><span class="line">MAINTAINER sameer@damagehead.com</span><br><span class="line"></span><br><span class="line"># 设置环境</span><br><span class="line">ENV RTMP_VERSION=1.1.10 \</span><br><span class="line">    NPS_VERSION=1.11.33.4 \</span><br><span class="line">    LIBAV_VERSION=11.8 \</span><br><span class="line">    NGINX_VERSION=1.10.1 \</span><br><span class="line">    NGINX_USER=www-data \</span><br><span class="line">    NGINX_SITECONF_DIR=/etc/nginx/sites-enabled \</span><br><span class="line">    NGINX_LOG_DIR=/var/log/nginx \</span><br><span class="line">    NGINX_TEMP_DIR=/var/lib/nginx \</span><br><span class="line">    NGINX_SETUP_DIR=/var/cache/nginx</span><br><span class="line"></span><br><span class="line"># 设置构建时变量，镜像建立完成后就失效</span><br><span class="line">ARG BUILD_LIBAV=false</span><br><span class="line">ARG WITH_DEBUG=false</span><br><span class="line">ARG WITH_PAGESPEED=true</span><br><span class="line">ARG WITH_RTMP=true</span><br><span class="line"></span><br><span class="line"># 复制本地文件到容器目录中</span><br><span class="line">COPY setup/ $&#123;NGINX_SETUP_DIR&#125;/</span><br><span class="line">RUN bash $&#123;NGINX_SETUP_DIR&#125;/install.sh</span><br><span class="line"></span><br><span class="line"># 复制本地配置文件到容器目录中</span><br><span class="line">COPY nginx.conf /etc/nginx/nginx.conf</span><br><span class="line">COPY entrypoint.sh /sbin/entrypoint.sh</span><br><span class="line"></span><br><span class="line"># 运行指令</span><br><span class="line">RUN chmod 755 /sbin/entrypoint.sh</span><br><span class="line"></span><br><span class="line"># 允许指定的端口</span><br><span class="line">EXPOSE 80/tcp 443/tcp 1935/tcp</span><br><span class="line"></span><br><span class="line"># 指定网站目录挂载点</span><br><span class="line">VOLUME [&quot;$&#123;NGINX_SITECONF_DIR&#125;&quot;]</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [&quot;/sbin/entrypoint.sh&quot;]</span><br><span class="line">CMD [&quot;/usr/sbin/nginx&quot;]</span><br></pre></td></tr></table></figure><h3 id="构建tomcat-环境"><a href="#构建tomcat-环境" class="headerlink" title="构建tomcat 环境"></a>构建tomcat 环境</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"># 指定基于的基础镜像</span><br><span class="line">FROM ubuntu:13.10</span><br><span class="line"></span><br><span class="line"># 维护者信息</span><br><span class="line">MAINTAINER zhangjiayang &quot;zhangjiayang@sczq.com.cn&quot;</span><br><span class="line"></span><br><span class="line"># 镜像的指令操作</span><br><span class="line"># 获取APT更新的资源列表</span><br><span class="line">RUN echo &quot;deb http://archive.ubuntu.com/ubuntu precise main universe&quot;&gt; /etc/apt/sources.list</span><br><span class="line"># 更新软件</span><br><span class="line">RUN apt-get update</span><br><span class="line"></span><br><span class="line"># Install curl</span><br><span class="line">RUN apt-get -y install curl</span><br><span class="line"></span><br><span class="line"># Install JDK 7</span><br><span class="line">RUN cd /tmp &amp;&amp;  curl -L &apos;http://download.oracle.com/otn-pub/java/jdk/7u65-b17/jdk-7u65-linux-x64.tar.gz&apos; -H &apos;Cookie: oraclelicense=accept-securebackup-cookie; gpw_e24=Dockerfile&apos; | tar -xz</span><br><span class="line">RUN mkdir -p /usr/lib/jvm</span><br><span class="line">RUN mv /tmp/jdk1.7.0_65/ /usr/lib/jvm/java-7-oracle/</span><br><span class="line"></span><br><span class="line"># Set Oracle JDK 7 as default Java</span><br><span class="line">RUN update-alternatives --install /usr/bin/java java /usr/lib/jvm/java-7-oracle/bin/java 300</span><br><span class="line">RUN update-alternatives --install /usr/bin/javac javac /usr/lib/jvm/java-7-oracle/bin/javac 300</span><br><span class="line"></span><br><span class="line"># 设置系统环境</span><br><span class="line">ENV JAVA_HOME /usr/lib/jvm/java-7-oracle/</span><br><span class="line"></span><br><span class="line"># Install tomcat7</span><br><span class="line">RUN cd /tmp &amp;&amp; curl -L &apos;http://archive.apache.org/dist/tomcat/tomcat-7/v7.0.8/bin/apache-tomcat-7.0.8.tar.gz&apos; | tar -xz</span><br><span class="line">RUN mv /tmp/apache-tomcat-7.0.8/ /opt/tomcat7/</span><br><span class="line"></span><br><span class="line">ENV CATALINA_HOME /opt/tomcat7</span><br><span class="line">ENV PATH $PATH:$CATALINA_HOME/bin</span><br><span class="line"></span><br><span class="line"># 复件tomcat7.sh到容器中的目录</span><br><span class="line">ADD tomcat7.sh /etc/init.d/tomcat7</span><br><span class="line">RUN chmod 755 /etc/init.d/tomcat7</span><br><span class="line"></span><br><span class="line"># Expose ports.  指定暴露的端口</span><br><span class="line">EXPOSE 8080</span><br><span class="line"></span><br><span class="line"># Define default command.</span><br><span class="line">ENTRYPOINT service tomcat7 start &amp;&amp; tail -f /opt/tomcat7/logs/catalina.out</span><br></pre></td></tr></table></figure><hr><p>tomcat7.sh命令文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/lib/jvm/java-7-oracle/</span><br><span class="line">export TOMCAT_HOME=/opt/tomcat7</span><br><span class="line"></span><br><span class="line">case $1 in</span><br><span class="line">start)</span><br><span class="line">  sh $TOMCAT_HOME/bin/startup.sh</span><br><span class="line">;;</span><br><span class="line">stop)</span><br><span class="line">  sh $TOMCAT_HOME/bin/shutdown.sh</span><br><span class="line">;;</span><br><span class="line">restart)</span><br><span class="line">  sh $TOMCAT_HOME/bin/shutdown.sh</span><br><span class="line">  sh $TOMCAT_HOME/bin/startup.sh</span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure><h2 id="原则与建议"><a href="#原则与建议" class="headerlink" title="原则与建议"></a>原则与建议</h2><ul><li>容器轻量化。从镜像中产生的容器应该尽量轻量化，能在足够短的时间内停止、销毁、重新生成并替换原来的容器。</li><li>使用 .gitignore。在大部分情况下，Dockerfile 会和构建所需的文件放在同一个目录中，为了提高构建的性能，应该使用 .gitignore 来过滤掉不需要的文件和目录。</li><li>为了减少镜像的大小，减少依赖，仅安装需要的软件包。</li><li>一个容器只做一件事。解耦复杂的应用，分成多个容器，而不是所有东西都放在一个容器内运行。如一个 Python Web 应用，可能需要 Server、DB、Cache、MQ、Log 等几个容器。一个更加极端的说法：One process per container。</li><li>减少镜像的图层。不要多个 Label、ENV 等标签。</li><li>对续行的参数按照字母表排序，特别是使用apt-get install -y安装包的时候。</li><li>使用构建缓存。如果不想使用缓存，可以在构建的时候使用参数–no-cache=true来强制重新生成中间镜像。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://p95stksgt.bkt.clouddn.com/docker01.png&quot; alt=&quot;Docker&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Dockerfile是什么？&quot;&gt;&lt;a href=&quot;#Dockerfile是什么？&quot; class=&quot;
      
    
    </summary>
    
      <category term="Docker" scheme="https://sunnyWu1104.github.io/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://sunnyWu1104.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker入门命令</title>
    <link href="https://sunnyWu1104.github.io/2018/06/07/docker-command/"/>
    <id>https://sunnyWu1104.github.io/2018/06/07/docker-command/</id>
    <published>2018-06-07T11:55:05.000Z</published>
    <updated>2018-06-08T08:23:44.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Docker是这间博客的第一个系列，有很多内容都引用到了各个大神的内容。我会在这个系列发布的某一个时间点单独发表文章针对各个大神的感谢以及博文出处，在此专题系列的各个文章就不再赘述引用了。希望大神们能够理解。</p></blockquote><p><img src="http://p95stksgt.bkt.clouddn.com/docker01.png" alt="Docker"></p><hr><h1 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h1><ul><li>用于获取容器/镜像的元数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect</span><br></pre></td></tr></table></figure><ul><li>查看当前系统Docker信息:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker info</span><br></pre></td></tr></table></figure><ul><li>查看当前容器使用了多少资源:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stats &lt;containerID&gt;</span><br></pre></td></tr></table></figure><hr><h1 id="image"><a href="#image" class="headerlink" title="image"></a>image</h1><ul><li>查找Docker Hub上的nginx镜像</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search [image_name]</span><br></pre></td></tr></table></figure><ul><li>拉取docker镜像并启动</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br><span class="line"></span><br><span class="line">options:</span><br><span class="line">- -a stdin: 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；</span><br><span class="line">- -d: 后台运行容器，并返回容器 ID；</span><br><span class="line">- -i: 以交互模式运行容器，通常与 -t 同时使用；</span><br><span class="line">- -t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</span><br><span class="line">- --name=&quot;nginx-lb&quot;: 为容器指定一个名称；</span><br><span class="line">- --dns 8.8.8.8: 指定容器使用的 DNS 服务器，默认和宿主一致；</span><br><span class="line">- --dns-search example.com: 指定容器 DNS 搜索域名，默认和宿主一致；</span><br><span class="line">- -h &quot;mars&quot;: 指定容器的 hostname；</span><br><span class="line">- -e username=&quot;ritchie&quot;: 设置环境变量；</span><br><span class="line">- --env-file=[]: 从指定文件读入环境变量；</span><br><span class="line">- --cpuset=&quot;0-2&quot; or --cpuset=&quot;0,1,2&quot;: 绑定容器到指定 CPU 运行；</span><br><span class="line">- -m : 设置容器使用内存最大值；</span><br><span class="line">- --net=&quot;bridge&quot;: 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型；</span><br><span class="line">- --link=[]: 添加链接到另一个容器；</span><br><span class="line">- --expose=[]: 开放一个端口或一组端口；</span><br></pre></td></tr></table></figure><ul><li>查看宿主机上的镜像，Docker镜像保存在/var/lib/docker目录下:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">docker image list</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">docker image ls</span><br></pre></td></tr></table></figure><ul><li>创建镜像文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker image build -t [image_name]</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">$ docker image build -t [image_name]:[tag]</span><br></pre></td></tr></table></figure><ul><li>删除镜像</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi  docker.io/tomcat:7.0.77-jre7   或者  docker rmi [image_id]</span><br></pre></td></tr></table></figure><hr><h1 id="container"><a href="#container" class="headerlink" title="container"></a>container</h1><ul><li>生成容器</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker container run -p [本机端口号]:[容器端口号] -it [image_name] /bin/bash</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">$ docker container run -p 8[本机端口号]:[容器端口号] -it [image_name]:[tag] /bin/bash</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- -p参数：容器的 3000 端口映射到本机的 8000 端口。</span><br><span class="line">- -it参数：容器的 Shell 映射到当前的 Shell，然后你在本机窗口输入的命令，就会传入容器。</span><br><span class="line">- /bin/bash：容器启动以后，内部第一个执行的命令。这里是启动 Bash，保证用户可以使用 Shell。</span><br></pre></td></tr></table></figure><ul><li>查看当前有哪些容器正在运行</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><ul><li>查看所有容器</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><ul><li>终止容器运行:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container kill [containerID]</span><br></pre></td></tr></table></figure><ul><li>启动、停止、重启容器命令：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run  --name [自己定义的容器名称]  -d -p [本机端口号]:[容器端口号] [image_name]:[tag]</span><br><span class="line"></span><br><span class="line">docker start [container_name]/[container_id]</span><br><span class="line">docker stop [container_name]/[container_id]</span><br><span class="line">docker restart [container_name]/[container_id]</span><br></pre></td></tr></table></figure><ul><li>后台启动一个容器后，如果想进入到这个容器，可以使用attach命令：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker attach [container_name]/[container_id]</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">docker container exec -it [containerID] /bin/bash （进入一个正在运行的 docker 容器。如果docker run命令运行容器的时候，没有使用-it参数，就要用这个命令进入容器。一旦进入了容器，就可以在容器的 Shell 执行命令了。）</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">docker exec -it [自己命名的容器名称] bash</span><br></pre></td></tr></table></figure><ul><li>删除容器的命令：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm [container_name]/[container_id]</span><br></pre></td></tr></table></figure><ul><li>删除所有停止的容器：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm $(docker ps -a -q)</span><br></pre></td></tr></table></figure><ul><li>在容器终止运行后自动删除容器文件:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container run --rm -p 8000:3000 -it koa-demo /bin/bash</span><br></pre></td></tr></table></figure><ul><li>从正在运行的 Docker 容器里面，将文件拷贝到本机：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container cp [containID]:[/path/to/file]</span><br></pre></td></tr></table></figure><hr><h1 id="push-image"><a href="#push-image" class="headerlink" title="push image"></a>push image</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1、 docker login</span><br><span class="line"></span><br><span class="line">2、docker image tag [imageName] [username]/[repository]:[tag]</span><br><span class="line">   docker image tag koa-demos:0.0.1 ruanyf/koa-demos:0.0.1</span><br><span class="line"></span><br><span class="line">3、 docker image build -t [username]/[repository]:[tag]</span><br><span class="line"></span><br><span class="line">4、docker image push [username]/[repository]:[tag]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Docker是这间博客的第一个系列，有很多内容都引用到了各个大神的内容。我会在这个系列发布的某一个时间点单独发表文章针对各个大神的感谢以及博文出处，在此专题系列的各个文章就不再赘述引用了。希望大神们能够理解。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;
      
    
    </summary>
    
      <category term="Docker" scheme="https://sunnyWu1104.github.io/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://sunnyWu1104.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>【SS/SSR】GFW与SS/SSR</title>
    <link href="https://sunnyWu1104.github.io/2018/06/04/GFW%E4%B8%8ESS&amp;SSR/"/>
    <id>https://sunnyWu1104.github.io/2018/06/04/GFW与SS&amp;SSR/</id>
    <published>2018-06-04T03:09:48.000Z</published>
    <updated>2018-06-04T03:09:48.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Phase-1"><a href="#Phase-1" class="headerlink" title="Phase 1:"></a>Phase 1:</h3><p>起初,我们对网络的访问时非常直接的,我们(客户端)向对方(服务端)发出请求,对方回应请求.</p><p><img src="http://p95stksgt.bkt.clouddn.com/ss1.jpg" alt="ss1"></p><h3 id="Phase-2"><a href="#Phase-2" class="headerlink" title="Phase 2:"></a>Phase 2:</h3><p>后来,建立了GFW(Great FireWall),也就是伟大的中国国家防火墙.</p><p><img src="http://p95stksgt.bkt.clouddn.com/ss2.jpg" alt="ss2"></p><p>下面花一点篇幅说几个GFW的封锁原理.</p><h4 id="1-域名解析服务缓存污染"><a href="#1-域名解析服务缓存污染" class="headerlink" title="1.域名解析服务缓存污染"></a>1.域名解析服务缓存污染</h4><p>首先,GFW使用了返回错误的DNS查询结果的方式,比如,当长城监听它骨干出口上某端口的DNS查询(当然这是UDP),接着对其进行入侵检测,一旦发现了和黑名单上关键词相匹配的域名查询请求,就会马上开始当演员,返回一个虚假的结果,这样,我们就会遭遇连接重置，无法获得目标网站的IP地址。</p><h4 id="2-针对境外的IP地址封锁"><a href="#2-针对境外的IP地址封锁" class="headerlink" title="2.针对境外的IP地址封锁"></a>2.针对境外的IP地址封锁</h4><p>防火长城的路由扩散技术中使用的静态路由其实是一条错误的路由，而且是有意配置错误的，其目的就是为了把本来是发往某个IP地址的数据包统统引导到一个“黑洞服务器”上，这个黑洞服务器上可以什么也不做，这样数据包就被无声无息地丢掉了,当然也可以进行一个虚假的回复.接着通过路由重分发,整个网络被打通,大家就都知道这样的IP要发向这么一个黑洞了,效率也得到了提升(封IP封的越来越开心了呢)</p><h4 id="3-IP地址特定端口封锁"><a href="#3-IP地址特定端口封锁" class="headerlink" title="3.IP地址特定端口封锁"></a>3.IP地址特定端口封锁</h4><p>结合2,为了达到更精确的封锁,长城会对特定端口上的数据包进行全部丢弃,以达到更彻底的封锁.</p><p>常常封锁的端口:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SSH           TCP      22</span><br><span class="line">HTTP                   80</span><br><span class="line">(PPTP)VPN     TCP      1723</span><br><span class="line">(L2TP)VPN     UDP      1701</span><br><span class="line">IPSec/L2TP    UDP      500&amp;4500</span><br><span class="line">OpenVPN       TCP/UDP  1194</span><br><span class="line">TLS/SSL/HTTPS TCP      443</span><br></pre></td></tr></table></figure><p>另外,中国X动,中国X通等ISP的手机IP端,所有的PPTP都被封锁.</p><h4 id="4-对加密连接的干扰"><a href="#4-对加密连接的干扰" class="headerlink" title="4.对加密连接的干扰"></a>4.对加密连接的干扰</h4><p>(不太了解加密握手可以看看隔壁的TLS/SSL)<br>在连接握手时，因为服务器的公钥是明文传输的，长城会阻断特定证书的加密连接，方法和无状态TCP连接重置一样，都是先发现匹配的黑名单证书，之后通过伪装成对方向连接两端的计算机发送RST干扰两者间正常的TCP连接，进而打断与特定IP地址之间的TLS加密连接握手，或者干脆直接将握手的数据包丢弃导致握手失败，从而导致TLS连接失败.</p><h4 id="5-深度包检测"><a href="#5-深度包检测" class="headerlink" title="5.深度包检测"></a>5.深度包检测</h4><p>深度数据包检测(Deep Package Inspection)是一种于应用层对网络上传递的数据进行侦测与处理的技术，DPI可对报文内容和协议特征进行检测。(似乎这个就是所谓的流量审查)</p><p>在中国大陆，DPI一度被ISP用于追踪用户行为以改善其广告推送业务的精准性，长城赖以检测关键词及嗅探加密流量的重要技术之一.基于必要的硬件设施、适宜的检测模型及相应的模式匹配算法，长城能够精确且快速地从实时网络环境中判别出有悖于预期标准的可疑流量，并对此及时作出相应地应对措施.</p><h3 id="Phase-3"><a href="#Phase-3" class="headerlink" title="Phase 3:"></a>Phase 3:</h3><p><img src="http://p95stksgt.bkt.clouddn.com/ss3.jpg" alt="ss3"></p><p>针对一些封锁技术,勤劳智慧而又充满勇气的天朝人民,使用了境外HTTP服务器代理,SOCKS服务,VPN 等等各种方式来 Break the GFW.</p><p>然而,尽管SSH是安全的,长城并不能知道里面发生了什么样的数据交换,它却依旧能在建立隧道时,分析连接特征从而进行干扰或是重定向连接.</p><p>其他的几种方式,也都差不多.</p><h3 id="Phase-4"><a href="#Phase-4" class="headerlink" title="Phase 4:"></a>Phase 4:</h3><p><img src="http://p95stksgt.bkt.clouddn.com/ss4.png" alt="ss4"></p><p>于是,出现了cloudwindy同学…带来的SS,没错,他被警察请去喝茶了.</p><p>延续Phase3,ShadowSocks实际上是将 SSH 创建的<br>SOCKS5协议 拆成两个部分,server 端和 client 端</p><p>不同的地方在于,客户端发出的请求基于 Socks5 协议跟 ss-local 端进行通讯，由于这个 ss-local 一般是本机或路由器或局域网的其他机器，不经过 GFW，所以解决了上面被 GFW 通过特征分析进行干扰的问题.<br>那么,就总体来说一下SS的运作流程:</p><p>首先,在服务器上配置好了 SS 服务器后,用户按照指定的密码、加密方式和端口使用 SS 客户端与其连接。在成功连接到服务器后，客户端会在用户的电脑上构建一个本地<br>Socks5 代理。浏览网络时，网络流量会被分到本地<br>socks5 代理，客户端将其加密之后发送到服务器，服务器以同样的加密方式将流量回传给客户端，以此实现代理上网。</p><h3 id="Phase-5"><a href="#Phase-5" class="headerlink" title="Phase 5:"></a>Phase 5:</h3><p>后来,似乎GFW对SS的流量有了某种辨识能力,于是,Github上一位叫BreakWa11的作者修改了原SS的代码,增加了混淆以及其他的一些功能(这里面有场不小的风波,从中可以学到一些开源协议的知识…感兴趣的去搜搜看),名为SSR.</p><p>其中使用的混淆机制有:</p><ul><li>http_simple</li><li>tls_simple</li><li>random_head</li><li>tls1.0_session_auth</li></ul><p>说说这其中比较好理解的</p><p>tls1.0_session_auth:模拟TLS1.0在客户端有session ID的情况下的握手连接。因为有session ID所以没有发送证书等复杂步骤，因而防火墙无法根据证书做判断(之前说过),同时自带一定的抗重放攻击的能力。</p><p>由于防火墙对TLS比较无能为力，抗封锁能力较强</p><p>random_head：开始通讯前发送一个几乎为随机的数据包,之后为原协议流。目标是让首个数据包根本不存在任何有效信息,使得GFW的统计学习机制失效.</p><h2 id="传送门"><a href="#传送门" class="headerlink" title="传送门:"></a>传送门:</h2><p>转自<a href="https://justin13wyx.me/2017/04/13/SS-SSR/" target="_blank" rel="noopener">【传送门】</a></p><p>Post author: Justin13<br>Post link: <a href="https://justin13wyx.me/2017/04/13/SS-SSR/" target="_blank" rel="noopener">https://justin13wyx.me/2017/04/13/SS-SSR/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Phase-1&quot;&gt;&lt;a href=&quot;#Phase-1&quot; class=&quot;headerlink&quot; title=&quot;Phase 1:&quot;&gt;&lt;/a&gt;Phase 1:&lt;/h3&gt;&lt;p&gt;起初,我们对网络的访问时非常直接的,我们(客户端)向对方(服务端)发出请求,对方回应请求.&lt;/p
      
    
    </summary>
    
      <category term="兴趣" scheme="https://sunnyWu1104.github.io/categories/%E5%85%B4%E8%B6%A3/"/>
    
    
      <category term="SS/SSR" scheme="https://sunnyWu1104.github.io/tags/SS-SSR/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://sunnyWu1104.github.io/2018/06/04/hello-world/"/>
    <id>https://sunnyWu1104.github.io/2018/06/04/hello-world/</id>
    <published>2018-06-04T03:09:48.000Z</published>
    <updated>2018-06-04T03:09:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>【Nginx】root和alias指令区别小记</title>
    <link href="https://sunnyWu1104.github.io/2018/06/04/%E3%80%90Nginx%E3%80%91root%E5%92%8Calias%E6%8C%87%E4%BB%A4%E5%8C%BA%E5%88%AB%E5%B0%8F%E8%AE%B0/"/>
    <id>https://sunnyWu1104.github.io/2018/06/04/【Nginx】root和alias指令区别小记/</id>
    <published>2018-06-04T03:09:48.000Z</published>
    <updated>2018-06-04T03:09:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h2><p>今天在搭建前端react项目的时候，nginx部署遇到了一个小问题:当前项目下引用的一些静态资源没有加载到，一直报错404，导致样式展示不全。</p><h3 id="排查问题："><a href="#排查问题：" class="headerlink" title="排查问题："></a>排查问题：</h3><ol><li>一直在怀疑是代码中引用的相对路径的问题，修改后问题还是无法修复。</li><li>怀疑nginx容器需要重启，问题还是无法修复。</li><li>排查nginx配置文件信息，发现了一些端倪：</li></ol><h4 id="原配置文件数据"><a href="#原配置文件数据" class="headerlink" title="原配置文件数据:"></a>原配置文件数据:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       8800;</span><br><span class="line">        server_name  lcoalhost;</span><br><span class="line">        access_log /data/www/logs/nginx/nginx_access.log  local;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">          root  /data/www/static;</span><br><span class="line">          index index.html;</span><br><span class="line"></span><br><span class="line">#       try_files $uri $uri/index.html;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">        error_page  405     =200 $uri;</span><br><span class="line"></span><br><span class="line">         location  /cashwallet &#123;</span><br><span class="line">             alias  /data/www/static;</span><br><span class="line">            index index.html;</span><br><span class="line">            try_files $uri /shaxiaoseng/index.html;</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure><p>熟悉nginx的同学，估计在这里一眼就能发现问题了，不过我这边就直接贴出来修改后的配置文件</p><h4 id="修改后的配置文件"><a href="#修改后的配置文件" class="headerlink" title="修改后的配置文件:"></a>修改后的配置文件:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       8888;</span><br><span class="line">        server_name  lcoalhost;</span><br><span class="line">        access_log /data/www/logs/nginx/nginx_access.log  local;</span><br><span class="line"></span><br><span class="line">        location /cashwallet &#123;</span><br><span class="line">          root  /data/www/static;</span><br><span class="line">          index index.html;</span><br><span class="line">          try_files $uri /shaxiaoseng/index.html;</span><br><span class="line"></span><br><span class="line">#       try_files $uri $uri/index.html;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">        error_page  405     =200 $uri;</span><br></pre></td></tr></table></figure><p><strong> 在这里我们可以发现一些改变：我将location下的alias修改为了root </strong></p><h2 id="原因"><a href="#原因" class="headerlink" title="原因:"></a>原因:</h2><p>alias指令对于root，操作上很简单，只要把root地址替换host后就是文件在硬盘路径（真实地址）。对于alise，它并不是替换匹配后的url地址，而是替换匹配部分的url。alias指令也可以有多个</p><h2 id="eg"><a href="#eg" class="headerlink" title="eg:"></a>eg:</h2><p>使用root指令，查询的资源路径会是: /cashwallet/data/www/static/cashwallet</p><p>使用alias指令，查询的资源路径会是: /data/www/static/cashwallet</p><p>所以会导致查无资源的问题。</p><h2 id="传送门"><a href="#传送门" class="headerlink" title="传送门:"></a>传送门:</h2><p>愿意的朋友，可以去<a href="https://www.jianshu.com/p/4be0d5882ec5" target="_blank" rel="noopener">【传送门】</a>看这篇更为详细的介绍对比</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题：&quot;&gt;&lt;a href=&quot;#问题：&quot; class=&quot;headerlink&quot; title=&quot;问题：&quot;&gt;&lt;/a&gt;问题：&lt;/h2&gt;&lt;p&gt;今天在搭建前端react项目的时候，nginx部署遇到了一个小问题:当前项目下引用的一些静态资源没有加载到，一直报错404，导致样式
      
    
    </summary>
    
      <category term="nginx日常小记" scheme="https://sunnyWu1104.github.io/categories/nginx%E6%97%A5%E5%B8%B8%E5%B0%8F%E8%AE%B0/"/>
    
    
      <category term="nginx" scheme="https://sunnyWu1104.github.io/tags/nginx/"/>
    
  </entry>
  
</feed>
