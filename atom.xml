<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cornelius&#39;s Notes</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://sunnyWu1104.github.io/"/>
  <updated>2018-06-08T02:59:33.000Z</updated>
  <id>https://sunnyWu1104.github.io/</id>
  
  <author>
    <name>Cornelius</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker入门命令</title>
    <link href="https://sunnyWu1104.github.io/2018/06/07/docker-command/"/>
    <id>https://sunnyWu1104.github.io/2018/06/07/docker-command/</id>
    <published>2018-06-07T11:55:05.000Z</published>
    <updated>2018-06-08T02:59:33.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p95stksgt.bkt.clouddn.com/docker01.png" alt="Docker"></p><hr><h1 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h1><ul><li>查看当前系统Docker信息:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker info</span><br></pre></td></tr></table></figure><hr><h1 id="image"><a href="#image" class="headerlink" title="image"></a>image</h1><ul><li>查找Docker Hub上的nginx镜像</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search [image_name]</span><br></pre></td></tr></table></figure><ul><li>拉取docker镜像</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br><span class="line"></span><br><span class="line">options:</span><br><span class="line">- -a stdin: 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；</span><br><span class="line">- -d: 后台运行容器，并返回容器 ID；</span><br><span class="line">- -i: 以交互模式运行容器，通常与 -t 同时使用；</span><br><span class="line">- -t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</span><br><span class="line">- --name=&quot;nginx-lb&quot;: 为容器指定一个名称；</span><br><span class="line">- --dns 8.8.8.8: 指定容器使用的 DNS 服务器，默认和宿主一致；</span><br><span class="line">- --dns-search example.com: 指定容器 DNS 搜索域名，默认和宿主一致；</span><br><span class="line">- -h &quot;mars&quot;: 指定容器的 hostname；</span><br><span class="line">- -e username=&quot;ritchie&quot;: 设置环境变量；</span><br><span class="line">- --env-file=[]: 从指定文件读入环境变量；</span><br><span class="line">- --cpuset=&quot;0-2&quot; or --cpuset=&quot;0,1,2&quot;: 绑定容器到指定 CPU 运行；</span><br><span class="line">- -m : 设置容器使用内存最大值；</span><br><span class="line">- --net=&quot;bridge&quot;: 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型；</span><br><span class="line">- --link=[]: 添加链接到另一个容器；</span><br><span class="line">- --expose=[]: 开放一个端口或一组端口；</span><br></pre></td></tr></table></figure><ul><li>启动镜像</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br></pre></td></tr></table></figure><ul><li>查看宿主机上的镜像，Docker镜像保存在/var/lib/docker目录下:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">docker image list</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">docker image ls</span><br></pre></td></tr></table></figure><ul><li>创建镜像文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker image build -t [image_name]</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">$ docker image build -t [image_name]:[tag]</span><br></pre></td></tr></table></figure><ul><li>删除镜像</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi  docker.io/tomcat:7.0.77-jre7   或者  docker rmi [image_id]</span><br></pre></td></tr></table></figure><hr><h1 id="container"><a href="#container" class="headerlink" title="container"></a>container</h1><ul><li>生成容器</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker container run -p [本机端口号]:[容器端口号] -it [image_name] /bin/bash</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">$ docker container run -p 8[本机端口号]:[容器端口号] -it [image_name]:[tag] /bin/bash</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- -p参数：容器的 3000 端口映射到本机的 8000 端口。</span><br><span class="line">- -it参数：容器的 Shell 映射到当前的 Shell，然后你在本机窗口输入的命令，就会传入容器。</span><br><span class="line">- /bin/bash：容器启动以后，内部第一个执行的命令。这里是启动 Bash，保证用户可以使用 Shell。</span><br></pre></td></tr></table></figure><ul><li>查看当前有哪些容器正在运行</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><ul><li>查看所有容器</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><ul><li>终止容器运行:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container kill [containerID]</span><br></pre></td></tr></table></figure><ul><li>启动、停止、重启容器命令：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run  --name [自己定义的容器名称]  -d -p [本机端口号]:[容器端口号] [image_name]:[tag]</span><br><span class="line"></span><br><span class="line">docker start [container_name]/[container_id]</span><br><span class="line">docker stop [container_name]/[container_id]</span><br><span class="line">docker restart [container_name]/[container_id]</span><br></pre></td></tr></table></figure><ul><li>后台启动一个容器后，如果想进入到这个容器，可以使用attach命令：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker attach [container_name]/[container_id]</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">docker container exec -it [containerID] /bin/bash （进入一个正在运行的 docker 容器。如果docker run命令运行容器的时候，没有使用-it参数，就要用这个命令进入容器。一旦进入了容器，就可以在容器的 Shell 执行命令了。）</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">docker exec -it [自己命名的容器名称] bash</span><br></pre></td></tr></table></figure><ul><li>删除容器的命令：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm [container_name]/[container_id]</span><br></pre></td></tr></table></figure><ul><li>删除所有停止的容器：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm $(docker ps -a -q)</span><br></pre></td></tr></table></figure><ul><li>在容器终止运行后自动删除容器文件:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container run --rm -p 8000:3000 -it koa-demo /bin/bash</span><br></pre></td></tr></table></figure><ul><li>从正在运行的 Docker 容器里面，将文件拷贝到本机：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container cp [containID]:[/path/to/file]</span><br></pre></td></tr></table></figure><hr><h1 id="push-image"><a href="#push-image" class="headerlink" title="push image"></a>push image</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1、 docker login</span><br><span class="line"></span><br><span class="line">2、docker image tag [imageName] [username]/[repository]:[tag]</span><br><span class="line">   docker image tag koa-demos:0.0.1 ruanyf/koa-demos:0.0.1</span><br><span class="line"></span><br><span class="line">3、 docker image build -t [username]/[repository]:[tag]</span><br><span class="line"></span><br><span class="line">4、docker image push [username]/[repository]:[tag]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://p95stksgt.bkt.clouddn.com/docker01.png&quot; alt=&quot;Docker&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;docker&quot;&gt;&lt;a href=&quot;#docker&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="Docker" scheme="https://sunnyWu1104.github.io/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://sunnyWu1104.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>【SS/SSR】GFW与SS/SSR</title>
    <link href="https://sunnyWu1104.github.io/2018/06/04/GFW%E4%B8%8ESS&amp;SSR/"/>
    <id>https://sunnyWu1104.github.io/2018/06/04/GFW与SS&amp;SSR/</id>
    <published>2018-06-04T03:09:48.000Z</published>
    <updated>2018-06-04T03:09:48.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Phase-1"><a href="#Phase-1" class="headerlink" title="Phase 1:"></a>Phase 1:</h3><p>起初,我们对网络的访问时非常直接的,我们(客户端)向对方(服务端)发出请求,对方回应请求.</p><p><img src="http://p95stksgt.bkt.clouddn.com/ss1.jpg" alt="ss1"></p><h3 id="Phase-2"><a href="#Phase-2" class="headerlink" title="Phase 2:"></a>Phase 2:</h3><p>后来,建立了GFW(Great FireWall),也就是伟大的中国国家防火墙.</p><p><img src="http://p95stksgt.bkt.clouddn.com/ss2.jpg" alt="ss2"></p><p>下面花一点篇幅说几个GFW的封锁原理.</p><h4 id="1-域名解析服务缓存污染"><a href="#1-域名解析服务缓存污染" class="headerlink" title="1.域名解析服务缓存污染"></a>1.域名解析服务缓存污染</h4><p>首先,GFW使用了返回错误的DNS查询结果的方式,比如,当长城监听它骨干出口上某端口的DNS查询(当然这是UDP),接着对其进行入侵检测,一旦发现了和黑名单上关键词相匹配的域名查询请求,就会马上开始当演员,返回一个虚假的结果,这样,我们就会遭遇连接重置，无法获得目标网站的IP地址。</p><h4 id="2-针对境外的IP地址封锁"><a href="#2-针对境外的IP地址封锁" class="headerlink" title="2.针对境外的IP地址封锁"></a>2.针对境外的IP地址封锁</h4><p>防火长城的路由扩散技术中使用的静态路由其实是一条错误的路由，而且是有意配置错误的，其目的就是为了把本来是发往某个IP地址的数据包统统引导到一个“黑洞服务器”上，这个黑洞服务器上可以什么也不做，这样数据包就被无声无息地丢掉了,当然也可以进行一个虚假的回复.接着通过路由重分发,整个网络被打通,大家就都知道这样的IP要发向这么一个黑洞了,效率也得到了提升(封IP封的越来越开心了呢)</p><h4 id="3-IP地址特定端口封锁"><a href="#3-IP地址特定端口封锁" class="headerlink" title="3.IP地址特定端口封锁"></a>3.IP地址特定端口封锁</h4><p>结合2,为了达到更精确的封锁,长城会对特定端口上的数据包进行全部丢弃,以达到更彻底的封锁.</p><p>常常封锁的端口:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SSH           TCP      22</span><br><span class="line">HTTP                   80</span><br><span class="line">(PPTP)VPN     TCP      1723</span><br><span class="line">(L2TP)VPN     UDP      1701</span><br><span class="line">IPSec/L2TP    UDP      500&amp;4500</span><br><span class="line">OpenVPN       TCP/UDP  1194</span><br><span class="line">TLS/SSL/HTTPS TCP      443</span><br></pre></td></tr></table></figure><p>另外,中国X动,中国X通等ISP的手机IP端,所有的PPTP都被封锁.</p><h4 id="4-对加密连接的干扰"><a href="#4-对加密连接的干扰" class="headerlink" title="4.对加密连接的干扰"></a>4.对加密连接的干扰</h4><p>(不太了解加密握手可以看看隔壁的TLS/SSL)<br>在连接握手时，因为服务器的公钥是明文传输的，长城会阻断特定证书的加密连接，方法和无状态TCP连接重置一样，都是先发现匹配的黑名单证书，之后通过伪装成对方向连接两端的计算机发送RST干扰两者间正常的TCP连接，进而打断与特定IP地址之间的TLS加密连接握手，或者干脆直接将握手的数据包丢弃导致握手失败，从而导致TLS连接失败.</p><h4 id="5-深度包检测"><a href="#5-深度包检测" class="headerlink" title="5.深度包检测"></a>5.深度包检测</h4><p>深度数据包检测(Deep Package Inspection)是一种于应用层对网络上传递的数据进行侦测与处理的技术，DPI可对报文内容和协议特征进行检测。(似乎这个就是所谓的流量审查)</p><p>在中国大陆，DPI一度被ISP用于追踪用户行为以改善其广告推送业务的精准性，长城赖以检测关键词及嗅探加密流量的重要技术之一.基于必要的硬件设施、适宜的检测模型及相应的模式匹配算法，长城能够精确且快速地从实时网络环境中判别出有悖于预期标准的可疑流量，并对此及时作出相应地应对措施.</p><h3 id="Phase-3"><a href="#Phase-3" class="headerlink" title="Phase 3:"></a>Phase 3:</h3><p><img src="http://p95stksgt.bkt.clouddn.com/ss3.jpg" alt="ss3"></p><p>针对一些封锁技术,勤劳智慧而又充满勇气的天朝人民,使用了境外HTTP服务器代理,SOCKS服务,VPN 等等各种方式来 Break the GFW.</p><p>然而,尽管SSH是安全的,长城并不能知道里面发生了什么样的数据交换,它却依旧能在建立隧道时,分析连接特征从而进行干扰或是重定向连接.</p><p>其他的几种方式,也都差不多.</p><h3 id="Phase-4"><a href="#Phase-4" class="headerlink" title="Phase 4:"></a>Phase 4:</h3><p><img src="http://p95stksgt.bkt.clouddn.com/ss4.png" alt="ss4"></p><p>于是,出现了cloudwindy同学…带来的SS,没错,他被警察请去喝茶了.</p><p>延续Phase3,ShadowSocks实际上是将 SSH 创建的<br>SOCKS5协议 拆成两个部分,server 端和 client 端</p><p>不同的地方在于,客户端发出的请求基于 Socks5 协议跟 ss-local 端进行通讯，由于这个 ss-local 一般是本机或路由器或局域网的其他机器，不经过 GFW，所以解决了上面被 GFW 通过特征分析进行干扰的问题.<br>那么,就总体来说一下SS的运作流程:</p><p>首先,在服务器上配置好了 SS 服务器后,用户按照指定的密码、加密方式和端口使用 SS 客户端与其连接。在成功连接到服务器后，客户端会在用户的电脑上构建一个本地<br>Socks5 代理。浏览网络时，网络流量会被分到本地<br>socks5 代理，客户端将其加密之后发送到服务器，服务器以同样的加密方式将流量回传给客户端，以此实现代理上网。</p><h3 id="Phase-5"><a href="#Phase-5" class="headerlink" title="Phase 5:"></a>Phase 5:</h3><p>后来,似乎GFW对SS的流量有了某种辨识能力,于是,Github上一位叫BreakWa11的作者修改了原SS的代码,增加了混淆以及其他的一些功能(这里面有场不小的风波,从中可以学到一些开源协议的知识…感兴趣的去搜搜看),名为SSR.</p><p>其中使用的混淆机制有:</p><ul><li>http_simple</li><li>tls_simple</li><li>random_head</li><li>tls1.0_session_auth</li></ul><p>说说这其中比较好理解的</p><p>tls1.0_session_auth:模拟TLS1.0在客户端有session ID的情况下的握手连接。因为有session ID所以没有发送证书等复杂步骤，因而防火墙无法根据证书做判断(之前说过),同时自带一定的抗重放攻击的能力。</p><p>由于防火墙对TLS比较无能为力，抗封锁能力较强</p><p>random_head：开始通讯前发送一个几乎为随机的数据包,之后为原协议流。目标是让首个数据包根本不存在任何有效信息,使得GFW的统计学习机制失效.</p><h2 id="传送门"><a href="#传送门" class="headerlink" title="传送门:"></a>传送门:</h2><p>转自<a href="https://justin13wyx.me/2017/04/13/SS-SSR/" target="_blank" rel="noopener">【传送门】</a></p><p>Post author: Justin13<br>Post link: <a href="https://justin13wyx.me/2017/04/13/SS-SSR/" target="_blank" rel="noopener">https://justin13wyx.me/2017/04/13/SS-SSR/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Phase-1&quot;&gt;&lt;a href=&quot;#Phase-1&quot; class=&quot;headerlink&quot; title=&quot;Phase 1:&quot;&gt;&lt;/a&gt;Phase 1:&lt;/h3&gt;&lt;p&gt;起初,我们对网络的访问时非常直接的,我们(客户端)向对方(服务端)发出请求,对方回应请求.&lt;/p
      
    
    </summary>
    
      <category term="兴趣" scheme="https://sunnyWu1104.github.io/categories/%E5%85%B4%E8%B6%A3/"/>
    
    
      <category term="SS/SSR" scheme="https://sunnyWu1104.github.io/tags/SS-SSR/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://sunnyWu1104.github.io/2018/06/04/hello-world/"/>
    <id>https://sunnyWu1104.github.io/2018/06/04/hello-world/</id>
    <published>2018-06-04T03:09:48.000Z</published>
    <updated>2018-06-04T03:09:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>【Nginx】root和alias指令区别小记</title>
    <link href="https://sunnyWu1104.github.io/2018/06/04/%E3%80%90Nginx%E3%80%91root%E5%92%8Calias%E6%8C%87%E4%BB%A4%E5%8C%BA%E5%88%AB%E5%B0%8F%E8%AE%B0/"/>
    <id>https://sunnyWu1104.github.io/2018/06/04/【Nginx】root和alias指令区别小记/</id>
    <published>2018-06-04T03:09:48.000Z</published>
    <updated>2018-06-04T03:09:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h2><p>今天在搭建前端react项目的时候，nginx部署遇到了一个小问题:当前项目下引用的一些静态资源没有加载到，一直报错404，导致样式展示不全。</p><h3 id="排查问题："><a href="#排查问题：" class="headerlink" title="排查问题："></a>排查问题：</h3><ol><li>一直在怀疑是代码中引用的相对路径的问题，修改后问题还是无法修复。</li><li>怀疑nginx容器需要重启，问题还是无法修复。</li><li>排查nginx配置文件信息，发现了一些端倪：</li></ol><h4 id="原配置文件数据"><a href="#原配置文件数据" class="headerlink" title="原配置文件数据:"></a>原配置文件数据:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       8800;</span><br><span class="line">        server_name  lcoalhost;</span><br><span class="line">        access_log /data/www/logs/nginx/nginx_access.log  local;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">          root  /data/www/static;</span><br><span class="line">          index index.html;</span><br><span class="line"></span><br><span class="line">#       try_files $uri $uri/index.html;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">        error_page  405     =200 $uri;</span><br><span class="line"></span><br><span class="line">         location  /cashwallet &#123;</span><br><span class="line">             alias  /data/www/static;</span><br><span class="line">            index index.html;</span><br><span class="line">            try_files $uri /shaxiaoseng/index.html;</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure><p>熟悉nginx的同学，估计在这里一眼就能发现问题了，不过我这边就直接贴出来修改后的配置文件</p><h4 id="修改后的配置文件"><a href="#修改后的配置文件" class="headerlink" title="修改后的配置文件:"></a>修改后的配置文件:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       8888;</span><br><span class="line">        server_name  lcoalhost;</span><br><span class="line">        access_log /data/www/logs/nginx/nginx_access.log  local;</span><br><span class="line"></span><br><span class="line">        location /cashwallet &#123;</span><br><span class="line">          root  /data/www/static;</span><br><span class="line">          index index.html;</span><br><span class="line">          try_files $uri /shaxiaoseng/index.html;</span><br><span class="line"></span><br><span class="line">#       try_files $uri $uri/index.html;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">        error_page  405     =200 $uri;</span><br></pre></td></tr></table></figure><p><strong> 在这里我们可以发现一些改变：我将location下的alias修改为了root </strong></p><h2 id="原因"><a href="#原因" class="headerlink" title="原因:"></a>原因:</h2><p>alias指令对于root，操作上很简单，只要把root地址替换host后就是文件在硬盘路径（真实地址）。对于alise，它并不是替换匹配后的url地址，而是替换匹配部分的url。alias指令也可以有多个</p><h2 id="eg"><a href="#eg" class="headerlink" title="eg:"></a>eg:</h2><p>使用root指令，查询的资源路径会是: /cashwallet/data/www/static/cashwallet</p><p>使用alias指令，查询的资源路径会是: /data/www/static/cashwallet</p><p>所以会导致查无资源的问题。</p><h2 id="传送门"><a href="#传送门" class="headerlink" title="传送门:"></a>传送门:</h2><p>愿意的朋友，可以去<a href="https://www.jianshu.com/p/4be0d5882ec5" target="_blank" rel="noopener">【传送门】</a>看这篇更为详细的介绍对比</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题：&quot;&gt;&lt;a href=&quot;#问题：&quot; class=&quot;headerlink&quot; title=&quot;问题：&quot;&gt;&lt;/a&gt;问题：&lt;/h2&gt;&lt;p&gt;今天在搭建前端react项目的时候，nginx部署遇到了一个小问题:当前项目下引用的一些静态资源没有加载到，一直报错404，导致样式
      
    
    </summary>
    
      <category term="nginx日常小记" scheme="https://sunnyWu1104.github.io/categories/nginx%E6%97%A5%E5%B8%B8%E5%B0%8F%E8%AE%B0/"/>
    
    
      <category term="nginx" scheme="https://sunnyWu1104.github.io/tags/nginx/"/>
    
  </entry>
  
</feed>
